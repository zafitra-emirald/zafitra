# server.R - Labsos Information System Server Logic (Enhanced Data Persistence Version)

server <- function(input, output, session) {
  
  # ================================
  # 1. REACTIVE VALUES INITIALIZATION
  # ================================
  
  values <- reactiveValues(
    admin_logged_in = FALSE,
    login_error = FALSE,
    kategori_data = kategori_data,
    periode_data = periode_data,
    lokasi_data = lokasi_data,
    pendaftaran_data = pendaftaran_data,
    selected_location = NULL,
    show_registration_modal = FALSE,
    last_registration_id = if(nrow(pendaftaran_data) > 0) max(pendaftaran_data$id_pendaftaran, na.rm = TRUE) else 0,
    last_update_timestamp = Sys.time()  # ENHANCED: Add timestamp for real-time updates
  )
  
  # ================================
  # 2. ADMIN AUTHENTICATION MODULE
  # ================================
  
  # Admin login status output
  output$is_admin_logged_in <- reactive({
    values$admin_logged_in
  })
  outputOptions(output, "is_admin_logged_in", suspendWhenHidden = FALSE)
  
  # Admin login process
  observeEvent(input$do_admin_login, {
    tryCatch({
      if (validate_admin(input$admin_username, input$admin_password)) {
        values$admin_logged_in <- TRUE
        values$login_error <- FALSE
        
        # Clean up login modal
        shinyjs::runjs("
          $('#admin_login_modal').hide();
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
        ")
        
        showNotification("Login berhasil! Selamat datang, Admin.", type = "message")
      } else {
        values$login_error <- TRUE
      }
    }, error = function(e) {
      values$login_error <- TRUE
      showNotification("Terjadi kesalahan saat login", type = "error")
    })
  })
  
  # Cancel/Close login modal
  observeEvent(input$cancel_admin_login, {
    values$login_error <- FALSE
    shinyjs::runjs("
      $('#admin_login_modal').hide();
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
  })
  
  observeEvent(input$close_admin_login, {
    values$login_error <- FALSE
    shinyjs::runjs("
      $('#admin_login_modal').hide();
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
  })
  
  # Admin logout
  observeEvent(input$admin_logout_btn, {
    values$admin_logged_in <- FALSE
    values$login_error <- FALSE
    
    # Reset any selected items
    session$userData$selected_kategori_id <- NULL
    session$userData$selected_periode_id <- NULL
    session$userData$selected_lokasi_id <- NULL
    
    # Reset registration modal state
    values$selected_location <- NULL
    values$show_registration_modal <- FALSE
    
    # FIXED: Specific modal cleanup - only admin login modal
    shinyjs::runjs("
      $('#admin_login_modal').modal('hide');
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
    
    # Redirect to homepage
    updateTabItems(session, "student_menu", "locations")
    showNotification("Logout berhasil! Diarahkan ke halaman utama.", type = "message")
  })
  
  # Login error handling
  output$login_error <- reactive({
    values$login_error
  })
  outputOptions(output, "login_error", suspendWhenHidden = FALSE)
  
  output$login_error_message <- renderText({
    "Username atau password salah!"
  })
  
  # ================================
  # 3. MASTER DATA - KATEGORI MODULE
  # ================================
  
  # Kategori table display
  output$kategori_table <- DT::renderDataTable({
    display_data <- values$kategori_data[, c("id_kategori", "nama_kategori", "deskripsi_kategori", "isu_strategis")]
    
    DT::datatable(display_data,
                  options = list(
                    pageLength = 10, 
                    dom = 'tip',
                    language = list(
                      emptyTable = "Tidak ada data kategori",
                      info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ kategori"
                    )
                  ),
                  colnames = c("ID", "Nama Kategori", "Deskripsi", "Isu Strategis"),
                  selection = "single",
                  rownames = FALSE)
  })
  
  # Handle kategori table row selection for editing
  observeEvent(input$kategori_table_rows_selected, {
    if (length(input$kategori_table_rows_selected) > 0) {
      selected_row <- input$kategori_table_rows_selected
      kategori <- values$kategori_data[selected_row, ]
      
      # Populate form fields
      updateTextInput(session, "kategori_nama", value = kategori$nama_kategori)
      updateTextAreaInput(session, "kategori_deskripsi", value = kategori$deskripsi_kategori)
      updateTextAreaInput(session, "kategori_isu", value = kategori$isu_strategis)
      
      # Store the selected ID for editing
      session$userData$selected_kategori_id <- kategori$id_kategori
      showNotification("Data kategori dipilih untuk edit", type = "message")
    }
  })
  
  # Save kategori (Add/Edit)
  observeEvent(input$save_kategori, {
    req(input$kategori_nama)
    
    tryCatch({
      if (is.null(session$userData$selected_kategori_id)) {
        # ADD NEW KATEGORI
        new_id <- max(values$kategori_data$id_kategori) + 1
        new_kategori <- data.frame(
          id_kategori = new_id,
          nama_kategori = input$kategori_nama,
          deskripsi_kategori = ifelse(is.null(input$kategori_deskripsi) || input$kategori_deskripsi == "", 
                                      "Tidak ada deskripsi", input$kategori_deskripsi),
          isu_strategis = ifelse(is.null(input$kategori_isu) || input$kategori_isu == "", 
                                 "Tidak ada isu strategis", input$kategori_isu),
          timestamp = Sys.time(),
          stringsAsFactors = FALSE
        )
        values$kategori_data <- rbind(values$kategori_data, new_kategori)
        save_kategori_data(values$kategori_data)
        showNotification("Kategori baru berhasil ditambahkan!", type = "message")
      } else {
        # EDIT EXISTING KATEGORI
        row_idx <- which(values$kategori_data$id_kategori == session$userData$selected_kategori_id)
        if(length(row_idx) > 0) {
          values$kategori_data[row_idx, "nama_kategori"] <- input$kategori_nama
          values$kategori_data[row_idx, "deskripsi_kategori"] <- ifelse(is.null(input$kategori_deskripsi) || input$kategori_deskripsi == "", 
                                                                        "Tidak ada deskripsi", input$kategori_deskripsi)
          values$kategori_data[row_idx, "isu_strategis"] <- ifelse(is.null(input$kategori_isu) || input$kategori_isu == "", 
                                                                   "Tidak ada isu strategis", input$kategori_isu)
          save_kategori_data(values$kategori_data)
          showNotification("Kategori berhasil diperbarui!", type = "message")
        }
      }
      
      # Update lokasi kategori choices
      updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
      
      # Reset form
      session$userData$selected_kategori_id <- NULL
      updateTextInput(session, "kategori_nama", value = "")
      updateTextAreaInput(session, "kategori_deskripsi", value = "")
      updateTextAreaInput(session, "kategori_isu", value = "")
      
    }, error = function(e) {
      showNotification(paste("Error:", e$message), type = "error")
    })
  })
  
  # Delete kategori with validation
  observeEvent(input$delete_kategori, {
    if (length(input$kategori_table_rows_selected) > 0) {
      selected_row <- input$kategori_table_rows_selected
      kategori_id <- values$kategori_data[selected_row, "id_kategori"]
      kategori_name <- values$kategori_data[selected_row, "nama_kategori"]
      
      # Check if kategori is used in lokasi
      usage_check <- check_category_usage(kategori_id, values$lokasi_data)
      
      if (!usage_check$can_delete) {
        showModal(modalDialog(
          title = "❌ Tidak Dapat Menghapus",
          div(class = "alert alert-danger", usage_check$reason),
          footer = modalButton("OK")
        ))
        return()
      }
      
      # Confirm deletion
      showModal(modalDialog(
        title = "⚠️ Konfirmasi Hapus",
        paste("Apakah Anda yakin ingin menghapus kategori '", kategori_name, "'?"),
        footer = tagList(
          actionButton("confirm_delete_kategori", "Hapus", class = "btn btn-danger"),
          modalButton("Batal")
        )
      ))
    } else {
      showNotification("Pilih kategori yang akan dihapus terlebih dahulu!", type = "warning")
    }
  })
  
  # Confirm kategori deletion
  observeEvent(input$confirm_delete_kategori, {
    if (length(input$kategori_table_rows_selected) > 0) {
      selected_row <- input$kategori_table_rows_selected
      kategori_name <- values$kategori_data[selected_row, "nama_kategori"]
      values$kategori_data <- values$kategori_data[-selected_row, ]
      save_kategori_data(values$kategori_data)
      
      # Update choices in other components
      updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
      
      showNotification(paste("Kategori '", kategori_name, "' berhasil dihapus!"), type = "message")
      removeModal()
    }
  })
  
  # Reset kategori form
  observeEvent(input$reset_kategori, {
    session$userData$selected_kategori_id <- NULL
    updateTextInput(session, "kategori_nama", value = "")
    updateTextAreaInput(session, "kategori_deskripsi", value = "")
    updateTextAreaInput(session, "kategori_isu", value = "")
    showNotification("Form kategori direset", type = "message")
  })
  
  # ================================
  # 4. MASTER DATA - PERIODE MODULE
  # ================================
  
  # Periode table display
  output$periode_table <- DT::renderDataTable({
    display_data <- values$periode_data[, c("id_periode", "nama_periode", "waktu_mulai", "waktu_selesai", "status")]
    display_data$waktu_mulai <- format(display_data$waktu_mulai, "%d-%m-%Y")
    display_data$waktu_selesai <- format(display_data$waktu_selesai, "%d-%m-%Y")
    
    DT::datatable(display_data,
                  options = list(
                    pageLength = 10,
                    dom = 'tip',
                    language = list(
                      emptyTable = "Tidak ada data periode",
                      info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ periode"
                    )
                  ),
                  colnames = c("ID", "Nama Periode", "Mulai", "Selesai", "Status"),
                  selection = "single",
                  rownames = FALSE) %>%
      DT::formatStyle("status",
                      backgroundColor = DT::styleEqual(
                        c("Aktif", "Tidak Aktif"),
                        c("#d4edda", "#f8d7da")
                      ),
                      fontWeight = "bold"
      )
  })
  
  # Handle periode table row selection for editing
  observeEvent(input$periode_table_rows_selected, {
    if (length(input$periode_table_rows_selected) > 0) {
      selected_row <- input$periode_table_rows_selected
      periode <- values$periode_data[selected_row, ]
      
      # Populate form fields
      updateTextInput(session, "periode_nama", value = periode$nama_periode)
      updateDateInput(session, "periode_mulai", value = periode$waktu_mulai)
      updateDateInput(session, "periode_selesai", value = periode$waktu_selesai)
      updateSelectInput(session, "periode_status", selected = periode$status)
      
      # Store the selected ID for editing
      session$userData$selected_periode_id <- periode$id_periode
      showNotification("Data periode dipilih untuk edit", type = "message")
    }
  })
  
  # Save periode (Add/Edit)
  observeEvent(input$save_periode, {
    req(input$periode_nama, input$periode_mulai, input$periode_selesai)
    
    tryCatch({
      # Validate dates
      if (input$periode_mulai >= input$periode_selesai) {
        showNotification("Tanggal mulai harus lebih awal dari tanggal selesai!", type = "error")
        return()
      }
      
      # Check for overlapping active periods
      if (input$periode_status == "Aktif") {
        overlapping <- values$periode_data[
          values$periode_data$status == "Aktif" & 
            !(if(!is.null(session$userData$selected_periode_id)) {
              values$periode_data$id_periode == session$userData$selected_periode_id
            } else {
              FALSE
            }), ]
        
        if (nrow(overlapping) > 0) {
          showNotification("Tidak boleh ada lebih dari satu periode aktif pada satu waktu!", type = "error")
          return()
        }
      }
      
      if (is.null(session$userData$selected_periode_id)) {
        # ADD NEW PERIODE
        new_id <- max(values$periode_data$id_periode) + 1
        new_periode <- data.frame(
          id_periode = new_id,
          nama_periode = input$periode_nama,
          waktu_mulai = input$periode_mulai,
          waktu_selesai = input$periode_selesai,
          status = input$periode_status,
          timestamp = Sys.time(),
          stringsAsFactors = FALSE
        )
        values$periode_data <- rbind(values$periode_data, new_periode)
        save_periode_data(values$periode_data)
        showNotification("Periode baru berhasil ditambahkan!", type = "message")
      } else {
        # EDIT EXISTING PERIODE
        row_idx <- which(values$periode_data$id_periode == session$userData$selected_periode_id)
        if(length(row_idx) > 0) {
          values$periode_data[row_idx, "nama_periode"] <- input$periode_nama
          values$periode_data[row_idx, "waktu_mulai"] <- input$periode_mulai
          values$periode_data[row_idx, "waktu_selesai"] <- input$periode_selesai
          values$periode_data[row_idx, "status"] <- input$periode_status
          save_periode_data(values$periode_data)
          showNotification("Periode berhasil diperbarui!", type = "message")
        }
      }
      
      # Reset form
      session$userData$selected_periode_id <- NULL
      updateTextInput(session, "periode_nama", value = "")
      updateDateInput(session, "periode_mulai", value = Sys.Date())
      updateDateInput(session, "periode_selesai", value = Sys.Date() + 30)
      updateSelectInput(session, "periode_status", selected = "Tidak Aktif")
      
    }, error = function(e) {
      showNotification(paste("Error:", e$message), type = "error")
    })
  })
  
  # Delete periode
  observeEvent(input$delete_periode, {
    if (length(input$periode_table_rows_selected) > 0) {
      selected_row <- input$periode_table_rows_selected
      periode_name <- values$periode_data[selected_row, "nama_periode"]
      
      # Confirm deletion
      showModal(modalDialog(
        title = "⚠️ Konfirmasi Hapus",
        paste("Apakah Anda yakin ingin menghapus periode '", periode_name, "'?"),
        footer = tagList(
          actionButton("confirm_delete_periode", "Hapus", class = "btn btn-danger"),
          modalButton("Batal")
        )
      ))
    } else {
      showNotification("Pilih periode yang akan dihapus terlebih dahulu!", type = "warning")
    }
  })
  
  # Confirm periode deletion
  observeEvent(input$confirm_delete_periode, {
    if (length(input$periode_table_rows_selected) > 0) {
      selected_row <- input$periode_table_rows_selected
      periode_name <- values$periode_data[selected_row, "nama_periode"]
      values$periode_data <- values$periode_data[-selected_row, ]
      save_periode_data(values$periode_data)
      
      showNotification(paste("Periode '", periode_name, "' berhasil dihapus!"), type = "message")
      removeModal()
    }
  })
  
  # Reset periode form
  observeEvent(input$reset_periode, {
    session$userData$selected_periode_id <- NULL
    updateTextInput(session, "periode_nama", value = "")
    updateDateInput(session, "periode_mulai", value = Sys.Date())
    updateDateInput(session, "periode_selesai", value = Sys.Date() + 30)
    updateSelectInput(session, "periode_status", selected = "Tidak Aktif")
    showNotification("Form periode direset", type = "message")
  })
  
  # ================================
  # 5. MASTER DATA - LOKASI MODULE
  # ================================
  
  # Update kategori choices when kategori data changes
  observe({
    updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
  })
  
  # Enhanced lokasi table with quota status
  output$lokasi_table <- DT::renderDataTable({
    display_lokasi <- values$lokasi_data[, c("id_lokasi", "nama_lokasi", "kategori_lokasi", "kuota_mahasiswa")]
    
    # Add quota status information
    display_lokasi$quota_status <- sapply(display_lokasi$nama_lokasi, function(nama) {
      status <- get_current_quota_status(nama, values$pendaftaran_data, values$lokasi_data)
      paste0(status$used_quota, "/", status$total_quota, 
             " (Tersedia: ", status$available_quota, ")")
    })
    
    display_lokasi$quota_detail <- sapply(display_lokasi$nama_lokasi, function(nama) {
      status <- get_current_quota_status(nama, values$pendaftaran_data, values$lokasi_data)
      paste0("Pending: ", status$pending, ", Approved: ", status$approved, ", Rejected: ", status$rejected)
    })
    
    DT::datatable(display_lokasi,
                  options = list(
                    pageLength = 10, 
                    dom = 'tip',
                    language = list(
                      emptyTable = "Tidak ada data lokasi",
                      info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ lokasi"
                    )
                  ),
                  colnames = c("ID", "Nama Lokasi", "Kategori", "Kuota Total", "Status Kuota", "Detail Pendaftar"),
                  selection = "single",
                  rownames = FALSE)
  })
  
  # Handle lokasi table row selection for editing
  observeEvent(input$lokasi_table_rows_selected, {
    if (length(input$lokasi_table_rows_selected) > 0) {
      selected_row <- input$lokasi_table_rows_selected
      lokasi <- values$lokasi_data[selected_row, ]
      
      # Populate form fields
      updateTextInput(session, "lokasi_nama", value = lokasi$nama_lokasi)
      updateTextAreaInput(session, "lokasi_deskripsi", value = lokasi$deskripsi_lokasi)
      updateSelectInput(session, "lokasi_kategori", selected = lokasi$kategori_lokasi)
      updateTextAreaInput(session, "lokasi_isu", value = lokasi$isu_strategis)
      updateSelectInput(session, "lokasi_prodi", selected = lokasi$program_studi[[1]])
      updateNumericInput(session, "lokasi_kuota", value = lokasi$kuota_mahasiswa)
      
      # Store the selected ID for editing
      session$userData$selected_lokasi_id <- lokasi$id_lokasi
      showNotification("Data lokasi dipilih untuk edit", type = "message")
    }
  })
  
  # Save lokasi (Add/Edit)
  observeEvent(input$save_lokasi, {
    req(input$lokasi_nama, input$lokasi_kategori)
    
    tryCatch({
      # Handle file upload for foto_lokasi
      foto_url <- "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=250&fit=crop"
      
      if (!is.null(input$lokasi_foto)) {
        # Create images directory if it doesn't exist
        if (!dir.exists("www/images")) dir.create("www/images", recursive = TRUE)
        
        # Generate unique filename
        file_ext <- tools::file_ext(input$lokasi_foto$name)
        new_filename <- paste0("lokasi_", Sys.time() %>% as.numeric(), ".", file_ext)
        foto_path <- file.path("www/images", new_filename)
        
        # Copy uploaded file
        file.copy(input$lokasi_foto$datapath, foto_path)
        foto_url <- paste0("images/", new_filename)
      }
      
      if (is.null(session$userData$selected_lokasi_id)) {
        # ADD NEW LOKASI
        new_id <- max(values$lokasi_data$id_lokasi) + 1
        new_lokasi <- data.frame(
          id_lokasi = new_id,
          nama_lokasi = input$lokasi_nama,
          deskripsi_lokasi = ifelse(is.null(input$lokasi_deskripsi) || input$lokasi_deskripsi == "", 
                                    "Tidak ada deskripsi", input$lokasi_deskripsi),
          kategori_lokasi = input$lokasi_kategori,
          isu_strategis = ifelse(is.null(input$lokasi_isu) || input$lokasi_isu == "", 
                                 "Tidak ada isu strategis", input$lokasi_isu),
          kuota_mahasiswa = ifelse(is.null(input$lokasi_kuota) || input$lokasi_kuota == 0, 5, input$lokasi_kuota),
          foto_lokasi = foto_url,
          timestamp = Sys.time(),
          stringsAsFactors = FALSE
        )
        
        # Add program studi
        selected_prodi <- input$lokasi_prodi
        if (is.null(selected_prodi) || length(selected_prodi) == 0) {
          selected_prodi <- c("Informatika")
        }
        new_lokasi$program_studi <- list(selected_prodi)
        
        values$lokasi_data <- rbind(values$lokasi_data, new_lokasi)
        save_lokasi_data(values$lokasi_data)
        showNotification("Lokasi baru berhasil ditambahkan!", type = "message")
        
      } else {
        # EDIT EXISTING LOKASI
        row_idx <- which(values$lokasi_data$id_lokasi == session$userData$selected_lokasi_id)
        if(length(row_idx) > 0) {
          values$lokasi_data[row_idx, "nama_lokasi"] <- input$lokasi_nama
          values$lokasi_data[row_idx, "deskripsi_lokasi"] <- ifelse(is.null(input$lokasi_deskripsi) || input$lokasi_deskripsi == "", 
                                                                    "Tidak ada deskripsi", input$lokasi_deskripsi)
          values$lokasi_data[row_idx, "kategori_lokasi"] <- input$lokasi_kategori
          values$lokasi_data[row_idx, "isu_strategis"] <- ifelse(is.null(input$lokasi_isu) || input$lokasi_isu == "", 
                                                                 "Tidak ada isu strategis", input$lokasi_isu)
          # Update foto only if new file uploaded
          if (!is.null(input$lokasi_foto)) {
            values$lokasi_data[row_idx, "foto_lokasi"] <- foto_url
          }
          values$lokasi_data[row_idx, "kuota_mahasiswa"] <- ifelse(is.null(input$lokasi_kuota) || input$lokasi_kuota == 0, 5, input$lokasi_kuota)
          
          # Update program studi
          selected_prodi <- input$lokasi_prodi
          if (is.null(selected_prodi) || length(selected_prodi) == 0) {
            selected_prodi <- values$lokasi_data[row_idx, "program_studi"][[1]]
          }
          values$lokasi_data[row_idx, "program_studi"] <- list(selected_prodi)
          
          save_lokasi_data(values$lokasi_data)
          showNotification("Lokasi berhasil diperbarui!", type = "message")
        }
      }
      
      # Reset form
      session$userData$selected_lokasi_id <- NULL
      updateTextInput(session, "lokasi_nama", value = "")
      updateTextAreaInput(session, "lokasi_deskripsi", value = "")
      updateSelectInput(session, "lokasi_kategori", selected = character(0))
      updateTextAreaInput(session, "lokasi_isu", value = "")
      updateSelectInput(session, "lokasi_prodi", selected = character(0))
      updateNumericInput(session, "lokasi_kuota", value = 5)
      
    }, error = function(e) {
      showNotification(paste("Error:", e$message), type = "error")
    })
  })
  
  # Delete lokasi
  observeEvent(input$delete_lokasi, {
    if (length(input$lokasi_table_rows_selected) > 0) {
      selected_row <- input$lokasi_table_rows_selected
      lokasi_name <- values$lokasi_data[selected_row, "nama_lokasi"]
      
      # Confirm deletion
      showModal(modalDialog(
        title = "⚠️ Konfirmasi Hapus",
        paste("Apakah Anda yakin ingin menghapus lokasi '", lokasi_name, "'?"),
        footer = tagList(
          actionButton("confirm_delete_lokasi", "Hapus", class = "btn btn-danger"),
          modalButton("Batal")
        )
      ))
    } else {
      showNotification("Pilih lokasi yang akan dihapus terlebih dahulu!", type = "warning")
    }
  })
  
  # Confirm lokasi deletion
  observeEvent(input$confirm_delete_lokasi, {
    if (length(input$lokasi_table_rows_selected) > 0) {
      selected_row <- input$lokasi_table_rows_selected
      lokasi_name <- values$lokasi_data[selected_row, "nama_lokasi"]
      values$lokasi_data <- values$lokasi_data[-selected_row, ]
      save_lokasi_data(values$lokasi_data)
      
      showNotification(paste("Lokasi '", lokasi_name, "' berhasil dihapus!"), type = "message")
      removeModal()
    }
  })
  
  # Reset lokasi form
  observeEvent(input$reset_lokasi, {
    session$userData$selected_lokasi_id <- NULL
    updateTextInput(session, "lokasi_nama", value = "")
    updateTextAreaInput(session, "lokasi_deskripsi", value = "")
    updateSelectInput(session, "lokasi_kategori", selected = character(0))
    updateTextAreaInput(session, "lokasi_isu", value = "")
    updateSelectInput(session, "lokasi_prodi", selected = character(0))
    updateNumericInput(session, "lokasi_kuota", value = 5)
    showNotification("Form lokasi direset", type = "message")
  })
  
  # ================================
  # 6. STUDENT INTERFACE MODULE
  # ================================
  
  # Quick stats for students
  output$total_locations_student <- renderText({
    nrow(values$lokasi_data)
  })
  
  output$active_period_student <- renderText({
    if(is_registration_open(values$periode_data)) "AKTIF" else "TUTUP"
  })
  
  # Check if there are locations to display
  output$has_locations <- reactive({
    nrow(values$lokasi_data) > 0
  })
  outputOptions(output, "has_locations", suspendWhenHidden = FALSE)
  
  # Enhanced locations display with real-time quota
  output$locations_grid <- renderUI({
    locations <- values$lokasi_data
    
    if (nrow(locations) == 0) {
      return(div(class = "alert alert-info text-center",
                 style = "margin-top: 50px; padding: 40px;",
                 icon("info-circle", style = "font-size: 3em; margin-bottom: 15px;"),
                 h4("Belum ada lokasi tersedia"),
                 p("Admin belum menambahkan lokasi. Silakan cek kembali nanti.")))
    }
    
    registration_open <- is_registration_open(values$periode_data)
    
    location_cards <- lapply(1:nrow(locations), function(i) {
      loc <- locations[i, ]
      quota_status <- get_current_quota_status(loc$nama_lokasi, values$pendaftaran_data, values$lokasi_data)
      
      # Determine quota status and styling
      quota_class <- if (quota_status$available_quota > 5) "quota-available" 
      else if (quota_status$available_quota > 0) "quota-limited" 
      else "quota-full"
      
      quota_text <- if (quota_status$available_quota > 0) 
        paste("Tersedia:", quota_status$available_quota, "dari", quota_status$total_quota) else 
          "KUOTA PENUH"
      
      quota_icon <- if (quota_status$available_quota > 5) "✅" 
      else if (quota_status$available_quota > 0) "⚠️" 
      else "❌"
      
      # Create enhanced card
      div(class = "location-card", style = "margin-bottom: 20px;",
          img(src = loc$foto_lokasi, class = "location-image", alt = loc$nama_lokasi),
          
          div(class = "location-content",
              div(class = "location-title", loc$nama_lokasi),
              span(class = "location-category", loc$kategori_lokasi),
              
              div(class = "location-description", loc$deskripsi_lokasi),
              
              div(class = "location-details",
                  div(style = "margin-bottom: 10px;",
                      strong("🎯 Isu Strategis: "), loc$isu_strategis
                  ),
                  div(class = "location-prodi",
                      strong("📚 Program Studi: "), 
                      paste(loc$program_studi[[1]], collapse = ", ")
                  ),
                  div(class = "location-quota",
                      strong("👥 Kuota: "), paste(quota_status$total_quota, "mahasiswa"),
                      br(),
                      span(style = "font-size: 0.9em; color: #666;",
                           "Pending: ", quota_status$pending, " | ",
                           "Disetujui: ", quota_status$approved, " | ",
                           "Ditolak: ", quota_status$rejected)
                  ),
                  
                  # Action section with quota status
                  div(class = "quota-section", style = "margin-top: 15px;",
                      div(
                        span(class = quota_class, paste(quota_icon, quota_text))
                      ),
                      div(style = "margin-top: 10px;",
                          if (quota_status$available_quota > 0 && registration_open) {
                            actionButton(paste0("register_", i), "📝 Daftar Sekarang", 
                                         class = "register-btn",
                                         style = "width: 100%;",
                                         onclick = paste0("
                                             Shiny.setInputValue('selected_location_id', '", loc$id_lokasi, "', {priority: 'event'}); 
                                             Shiny.setInputValue('show_registration_modal', Math.random(), {priority: 'event'});
                                           "))
                          } else {
                            if (!registration_open) {
                              span("⏰ Periode pendaftaran tidak aktif", 
                                   class = "text-muted", 
                                   style = "font-style: italic; display: block; text-align: center; padding: 10px;")
                            } else {
                              span("❌ Kuota Penuh", 
                                   class = "text-danger", 
                                   style = "font-weight: bold; display: block; text-align: center; padding: 10px;")
                            }
                          }
                      )
                  )
              )
          )
      )
    })
    
    return(do.call(tagList, location_cards))
  })
  
  # ================================
  # 7. ENHANCED REGISTRATION FUNCTIONALITY
  # ================================
  
  # FIXED: Handle location selection and show registration modal with form reset
  observeEvent(input$selected_location_id, {
    req(input$selected_location_id)
    
    tryCatch({
      # FIXED: Always reset form when opening modal (whether new location or reopening)
      reset_registration_form()
      
      lokasi <- values$lokasi_data[values$lokasi_data$id_lokasi == input$selected_location_id, ]
      if (nrow(lokasi) > 0) {
        values$selected_location <- lokasi[1, ]
        values$show_registration_modal <- TRUE
        updateSelectInput(session, "reg_program_studi", choices = lokasi$program_studi[[1]])
        
        # FIXED: Additional delay to ensure file inputs are properly cleared
        shinyjs::delay(200, {
          shinyjs::runjs("
            // Extra insurance that file inputs are cleared when modal opens
            $('input[type=file]').each(function() {
              this.value = '';
              $(this).val('');
            });
          ")
        })
        
        showNotification("Lokasi dipilih. Form telah dibersihkan dan siap diisi.", type = "message")
      } else {
        showNotification("Error: Lokasi tidak ditemukan", type = "error")
      }
    }, error = function(e) {
      showNotification(paste("Error memilih lokasi:", e$message), type = "error")
    })
  }, ignoreInit = TRUE)
  
  # Show/hide registration modal reactive output
  output$show_registration_modal <- reactive({
    values$show_registration_modal
  })
  outputOptions(output, "show_registration_modal", suspendWhenHidden = FALSE)
  
  # Registration modal trigger
  observeEvent(input$show_registration_modal, {
    req(input$show_registration_modal)
    values$show_registration_modal <- TRUE
  }, ignoreInit = TRUE)
  
  # Registration form information outputs
  output$selected_location_info <- renderText({
    if (!is.null(values$selected_location)) {
      paste(
        "📍 Lokasi:", values$selected_location$nama_lokasi, "\n",
        "🏷️ Kategori:", values$selected_location$kategori_lokasi, "\n", 
        "👥 Kuota:", values$selected_location$kuota_mahasiswa, "mahasiswa\n",
        "📚 Program Studi yang dapat mendaftar:", paste(values$selected_location$program_studi[[1]], collapse = ", ")
      )
    } else {
      "Tidak ada lokasi yang dipilih"
    }
  })
  
  output$location_description <- renderText({
    if (!is.null(values$selected_location)) {
      values$selected_location$deskripsi_lokasi
    } else {
      "Tidak ada deskripsi"
    }
  })
  
  output$location_strategic_issues <- renderText({
    if (!is.null(values$selected_location)) {
      values$selected_location$isu_strategis
    } else {
      "Tidak ada isu strategis"
    }
  })
  
  # FIXED: Enhanced reset registration form function with comprehensive file input clearing
  reset_registration_form <- function() {
    tryCatch({
      # Reset text inputs
      updateTextInput(session, "reg_nama", value = "")
      updateSelectInput(session, "reg_program_studi", selected = character(0))
      updateTextInput(session, "reg_kontak", value = "")
      updateTextInput(session, "reg_usulan_dosen", value = "")
      updateTextAreaInput(session, "reg_alasan", value = "")
      
      # FIXED: Comprehensive file inputs clearing that persists across modal reopens
      shinyjs::runjs("
          // FIXED: Method 1 - Direct DOM manipulation for file inputs
          var fileInputIds = ['reg_cv_mahasiswa', 'reg_form_rekomendasi', 'reg_form_komitmen', 'reg_transkrip_nilai'];
          
          fileInputIds.forEach(function(inputId) {
            var input = document.getElementById(inputId);
            if (input) {
              // Reset value
              input.value = '';
              input.files = null;
              
              // Clone and replace to ensure complete reset (most reliable method)
              var newInput = input.cloneNode(false);
              input.parentNode.replaceChild(newInput, input);
            }
          });
          
          // FIXED: Method 2 - jQuery backup clearing
          $('input[type=file]').each(function() {
            this.value = '';
            $(this).val('');
            
            // Clear visual indicators
            $(this).removeClass('is-valid is-invalid has-file file-selected');
            $(this).siblings('label, .custom-file-label').text('Choose file');
            $(this).next('.file-feedback, .file-name').text('');
          });
          
          // FIXED: Method 3 - Clear Shiny file input bindings
          if (window.Shiny && window.Shiny.inputBindings) {
            fileInputIds.forEach(function(inputId) {
              try {
                window.Shiny.inputBindings.getInputBinding('#' + inputId)?.setValue(document.getElementById(inputId), null);
              } catch(e) {}
            });
          }
          
          console.log('File inputs completely reset and cleared');
        ")
      
    }, error = function(e) {
      console.log("Error resetting form:", e)
    })
  }
  
  # Close registration modal handler
  observeEvent(input$close_registration_modal, {
    tryCatch({
      # Reset all form data
      values$selected_location <- NULL
      values$show_registration_modal <- FALSE
      reset_registration_form()
      
      # Clean up modal state
      shinyjs::runjs("
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
        ")
      
      showNotification("Form pendaftaran ditutup", type = "message")
    }, error = function(e) {
      # Force cleanup even if there's an error
      values$selected_location <- NULL
      values$show_registration_modal <- FALSE
    })
  })
  
  # FIXED: Check registration eligibility - allow reapplication after rejection
  check_registration_eligibility <- function(student_name, location_name, pendaftaran_data = NULL, periode_data = NULL) {
    # Check if registration period is open
    if(!is_registration_open(periode_data)) {
      return(list(eligible = FALSE, reason = "Periode pendaftaran tidak aktif"))
    }
    
    if(is.null(pendaftaran_data)) {
      if(exists("pendaftaran_data")) {
        pendaftaran_data <- get("pendaftaran_data", envir = .GlobalEnv)
      } else {
        return(list(eligible = TRUE, reason = ""))
      }
    }
    
    # FIXED: Only check for active registrations (Diajukan or Disetujui)
    # Allow students to register again if their previous registration was rejected
    existing_active <- pendaftaran_data[
      pendaftaran_data$nama_mahasiswa == student_name & 
        pendaftaran_data$status_pendaftaran %in% c("Diajukan", "Disetujui"), 
    ]
    
    if(nrow(existing_active) > 0) {
      # Check if they have active registration in the SAME location
      same_location <- existing_active[existing_active$pilihan_lokasi == location_name, ]
      if(nrow(same_location) > 0) {
        status <- same_location$status_pendaftaran[1]
        if(status == "Diajukan") {
          return(list(eligible = FALSE, reason = "Anda sudah mendaftar di lokasi ini dan sedang dalam proses review"))
        } else if(status == "Disetujui") {
          return(list(eligible = FALSE, reason = "Anda sudah diterima di lokasi ini"))
        }
      }
      
      # Check if they have active registration in DIFFERENT location
      different_location <- existing_active[existing_active$pilihan_lokasi != location_name, ]
      if(nrow(different_location) > 0) {
        other_location <- different_location$pilihan_lokasi[1]
        status <- different_location$status_pendaftaran[1]
        if(status == "Diajukan") {
          return(list(eligible = FALSE, reason = paste("Anda sudah mendaftar di lokasi '", other_location, "' dan sedang dalam proses review. Tunggu hasil review terlebih dahulu.")))
        } else if(status == "Disetujui") {
          return(list(eligible = FALSE, reason = paste("Anda sudah diterima di lokasi '", other_location, "'. Tidak dapat mendaftar ke lokasi lain.")))
        }
      }
    }
    
    # FIXED: Allow registration if no active registrations found
    # (This includes cases where previous registrations were rejected)
    return(list(eligible = TRUE, reason = ""))
  }
  
  # FIXED: Handle success modal closure with proper registration modal cleanup
  observeEvent(input$close_success_modal, {
    tryCatch({
      # Step 1: Remove the success modal first
      removeModal()
      
      # Step 2: FIXED - Reset registration modal state BEFORE cleanup
      values$selected_location <- NULL
      values$show_registration_modal <- FALSE
      
      # Step 3: FIXED - Enhanced form reset with comprehensive cleanup
      reset_registration_form()
      
      # Step 4: FIXED - Complete modal cleanup with registration modal removal
      shinyjs::runjs("
          // Remove all modals and backdrops
          $('.modal').modal('hide');
          $('.modal').remove();
          $('.modal-backdrop').remove();
          
          // Reset body state
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
          $('body').css('overflow-x', '');
          $('body').css('overflow-y', '');
          
          // Force remove any remaining modal artifacts
          $('[id*=\"modal\"]').remove();
          $('.fade.show').remove();
          
          // Reset any modal-related classes
          $('*').removeClass('modal-backdrop');
          
          // Ensure page is scrollable again
          $(document).off('touchmove.modal');
          
          // FIXED: Specifically target registration modal cleanup
          $('#registration_modal').modal('hide');
          $('#registration_modal').remove();
          
          // Clear any lingering modal states
          setTimeout(function() {
            $('.modal').remove();
            $('.modal-backdrop').remove();
            $('body').removeClass('modal-open');
            $('body').css('padding-right', '');
            $('body').css('overflow', '');
          }, 100);
        ")
      
      # Step 5: FIXED - Add delay to ensure DOM cleanup before final state reset
      shinyjs::delay(200, {
        # Final state verification and cleanup
        values$show_registration_modal <- FALSE
        values$selected_location <- NULL
        
        # Force reactive update
        values$last_update_timestamp <- Sys.time()
        
        showNotification("Pendaftaran selesai! Form telah ditutup.", type = "message")
      })
      
    }, error = function(e) {
      # FIXED: Force cleanup even if there's an error
      values$selected_location <- NULL
      values$show_registration_modal <- FALSE
      
      # Emergency modal cleanup
      shinyjs::runjs("
          $('.modal').modal('hide');
          $('.modal').remove();
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
          
          // Force cleanup
          setTimeout(function() {
            $('.modal').remove();
            $('.modal-backdrop').remove();
            $('body').removeClass('modal-open');
          }, 100);
        ")
      
      showNotification("Form pendaftaran telah ditutup", type = "message")
    })
  })
  
  # FIXED: Enhanced reset registration form function with comprehensive file input clearing
  reset_registration_form <- function() {
    tryCatch({
      # Reset text inputs
      updateTextInput(session, "reg_nama", value = "")
      updateSelectInput(session, "reg_program_studi", selected = character(0))
      updateTextInput(session, "reg_kontak", value = "")
      updateTextInput(session, "reg_usulan_dosen", value = "")
      updateTextAreaInput(session, "reg_alasan", value = "")
      
      # FIXED: Comprehensive file inputs clearing that works across sessions
      shinyjs::runjs("
          // FIXED: Clear all file inputs with multiple approaches for reliability
          var fileInputs = ['#reg_cv_mahasiswa', '#reg_form_rekomendasi', '#reg_form_komitmen', '#reg_transkrip_nilai'];
          
          fileInputs.forEach(function(inputId) {
            var input = $(inputId);
            if (input.length) {
              // Method 1: Clear value and trigger change
              input.val('').trigger('change');
              
              // Method 2: Reset the DOM element directly
              input[0].value = '';
              
              // Method 3: Clone and replace (most reliable for persistent file inputs)
              var newInput = input.clone(true);
              input.replaceWith(newInput);
              
              // Method 4: Clear any associated labels or display elements
              var label = input.next('label, .file-label, .custom-file-label');
              if (label.length) {
                label.text('Choose file');
                label.removeClass('selected file-selected');
              }
              
              // Method 5: Clear any file name displays
              var fileName = input.siblings('.file-name, .selected-file');
              if (fileName.length) {
                fileName.text('').hide();
              }
            }
          });
          
          // FIXED: Clear all file input types comprehensively
          $('input[type=file]').each(function() {
            // Clear the value
            $(this).val('');
            this.value = '';
            
            // Clone and replace to ensure complete reset
            var newElement = $(this).clone(true);
            $(this).replaceWith(newElement);
            
            // Reset any associated elements
            var wrapper = newElement.closest('.form-group, .input-group, .file-input-wrapper');
            if (wrapper.length) {
              wrapper.find('.file-upload-info, .file-preview, .upload-status').remove();
              wrapper.find('label').text('Choose file');
            }
          });
          
          // FIXED: Clear any file-related UI elements
          $('.form-control-file').each(function() {
            $(this).val('');
            this.value = '';
            $(this).trigger('change');
            
            // Reset custom file input styling
            var customLabel = $(this).next('.custom-file-label');
            if (customLabel.length) {
              customLabel.text('Choose file').removeClass('selected');
            }
          });
          
          // FIXED: Remove any file preview or status elements
          $('.file-preview, .upload-success, .file-selected-indicator').remove();
          $('.file-upload-status').html('');
          
          // FIXED: Reset form validation states for file inputs
          $('input[type=file]').removeClass('is-valid is-invalid');
          $('.file-input-feedback').hide();
          
          // FIXED: Clear any cached file data in JavaScript
          if (window.selectedFiles) {
            window.selectedFiles = {};
          }
          
          // FIXED: Force form reset to ensure all inputs are clean
          var form = $('input[type=file]').closest('form');
          if (form.length && form[0].reset) {
            // Store non-file values
            var nonFileValues = {};
            form.find('input:not([type=file]), select, textarea').each(function() {
              nonFileValues[this.id || this.name] = $(this).val();
            });
            
            // Reset form
            form[0].reset();
            
            // Restore non-file values
            Object.keys(nonFileValues).forEach(function(key) {
              var element = form.find('#' + key + ', [name=\"' + key + '\"]');
              if (element.length) {
                element.val(nonFileValues[key]);
              }
            });
          }
          
          console.log('File inputs cleared completely');
        ")
      
      showNotification("Form pendaftaran telah direset lengkap", type = "message")
    }, error = function(e) {
      # FIXED: Fallback file clearing if main method fails
      shinyjs::runjs("
          // Emergency file input clearing
          $('input[type=file]').each(function() {
            this.value = '';
            $(this).val('');
          });
          console.log('Emergency file input clearing executed');
        ")
      showNotification("Form direset (beberapa field mungkin perlu dibersihkan manual)", type = "warning")
    })
  }
  
  # FIXED: Handle location selection with mandatory form reset
  observeEvent(input$selected_location_id, {
    req(input$selected_location_id)
    
    tryCatch({
      # FIXED: Always reset form when selecting a new location
      if (!is.null(values$selected_location) || values$show_registration_modal == TRUE) {
        # User is switching locations or reopening modal - clear everything
        reset_registration_form()
        showNotification("Form dibersihkan untuk lokasi baru", type = "message")
      }
      
      lokasi <- values$lokasi_data[values$lokasi_data$id_lokasi == input$selected_location_id, ]
      if (nrow(lokasi) > 0) {
        values$selected_location <- lokasi[1, ]
        values$show_registration_modal <- TRUE
        updateSelectInput(session, "reg_program_studi", choices = lokasi$program_studi[[1]])
        
        # FIXED: Force file input clearing after location selection
        shinyjs::delay(100, {
          shinyjs::runjs("
              // Ensure file inputs are clean for new registration
              $('input[type=file]').each(function() {
                this.value = '';
                $(this).val('').trigger('change');
                
                // Reset labels
                var label = $(this).next('label, .custom-file-label');
                if (label.length) {
                  label.text('Choose file');
                }
              });
            ")
        })
        
        showNotification("Lokasi dipilih. Form siap untuk pendaftaran baru.", type = "message")
      } else {
        showNotification("Error: Lokasi tidak ditemukan", type = "error")
      }
    }, error = function(e) {
      showNotification(paste("Error memilih lokasi:", e$message), type = "error")
    })
  }, ignoreInit = TRUE)
  
  # FIXED: Close registration modal handler with comprehensive file clearing
  observeEvent(input$close_registration_modal, {
    tryCatch({
      # FIXED: Reset form with comprehensive file clearing before closing
      reset_registration_form()
      
      # Reset modal state
      values$show_registration_modal <- FALSE
      values$selected_location <- NULL
      
      # FIXED: Additional file clearing on modal close
      shinyjs::runjs("
          // Final file input clearing on modal close
          setTimeout(function() {
            $('input[type=file]').each(function() {
              this.value = '';
              $(this).val('');
              
              // Reset any visual indicators
              $(this).siblings('label').text('Choose file');
              $(this).removeClass('is-valid is-invalid');
            });
            
            // Clear any remaining file artifacts
            $('.file-preview, .upload-success').remove();
            console.log('Modal close: File inputs cleared');
          }, 50);
        ")
      
      # Clean up modal state
      shinyjs::runjs("
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
        ")
      
      showNotification("Form pendaftaran ditutup dan dibersihkan", type = "message")
    }, error = function(e) {
      # Force cleanup even if there's an error
      values$selected_location <- NULL
      values$show_registration_modal <- FALSE
      
      # Emergency file clearing
      shinyjs::runjs("
          $('input[type=file]').each(function() {
            this.value = '';
            $(this).val('');
          });
        ")
    })
  })
  
  # FIXED: Registration modal trigger with pre-clearing
  observeEvent(input$show_registration_modal, {
    req(input$show_registration_modal)
    
    # FIXED: Clear form before showing modal
    if (values$show_registration_modal == TRUE) {
      shinyjs::delay(50, {
        reset_registration_form()
      })
    }
    
    values$show_registration_modal <- TRUE
  }, ignoreInit = TRUE)
  
  # FIXED: Add a general file input observer to track and clear file selections
  observe({
    # FIXED: Monitor file input changes and clear them when modal is closed
    if (!isTRUE(values$show_registration_modal)) {
      shinyjs::runjs("
          // Clear any lingering file selections when modal is not active
          if (!$('.modal').is(':visible')) {
            $('input[type=file]').each(function() {
              if ($(this).val() !== '') {
                this.value = '';
                $(this).val('').trigger('change');
                
                // Reset labels
                $(this).next('label, .custom-file-label').text('Choose file');
              }
            });
          }
        ")
    }
  })
  
  # FIXED: Additional file clearing on session events
  observeEvent(values$show_registration_modal, {
    if (values$show_registration_modal == TRUE) {
      # FIXED: Clear files when modal opens
      shinyjs::delay(100, {
        shinyjs::runjs("
            // Clear file inputs when modal opens for clean start
            $('input[type=file]').each(function() {
              if (this.value !== '') {
                this.value = '';
                $(this).val('').trigger('change');
                $(this).next('label, .custom-file-label').text('Choose file');
              }
            });
            console.log('Modal opened: File inputs cleared');
          ")
      })
    } else if (values$show_registration_modal == FALSE) {
      # FIXED: Clear files when modal closes
      shinyjs::delay(50, {
        shinyjs::runjs("
            // Clear file inputs when modal closes
            $('input[type=file]').each(function() {
              this.value = '';
              $(this).val('');
              $(this).next('label, .custom-file-label').text('Choose file');
            });
            console.log('Modal closed: File inputs cleared');
          ")
      })
    }
  })
  
  # FIXED: Enhanced show/hide registration modal reactive output with proper state tracking
  output$show_registration_modal <- reactive({
    # Ensure the reactive properly responds to state changes
    result <- values$show_registration_modal
    
    # FIXED: Additional check to ensure modal state consistency
    if (is.null(values$selected_location) || is.null(result)) {
      values$show_registration_modal <- FALSE
      return(FALSE)
    }
    
    return(result)
  })
  outputOptions(output, "show_registration_modal", suspendWhenHidden = FALSE)
# ================================
# 2. ADMIN AUTHENTICATION MODULE
# ================================

# Admin login status output
output$is_admin_logged_in <- reactive({
  values$admin_logged_in
})
outputOptions(output, "is_admin_logged_in", suspendWhenHidden = FALSE)

# Admin login process
observeEvent(input$do_admin_login, {
  tryCatch({
    if (validate_admin(input$admin_username, input$admin_password)) {
      values$admin_logged_in <- TRUE
      values$login_error <- FALSE
      
      # Clean up login modal
      shinyjs::runjs("
          $('#admin_login_modal').hide();
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
        ")
      
      showNotification("Login berhasil! Selamat datang, Admin.", type = "message")
    } else {
      values$login_error <- TRUE
    }
  }, error = function(e) {
    values$login_error <- TRUE
    showNotification("Terjadi kesalahan saat login", type = "error")
  })
})

# Cancel/Close login modal
observeEvent(input$cancel_admin_login, {
  values$login_error <- FALSE
  shinyjs::runjs("
      $('#admin_login_modal').hide();
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
})

observeEvent(input$close_admin_login, {
  values$login_error <- FALSE
  shinyjs::runjs("
      $('#admin_login_modal').hide();
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
})

# Admin logout
observeEvent(input$admin_logout_btn, {
  values$admin_logged_in <- FALSE
  values$login_error <- FALSE
  
  # Reset any selected items
  session$userData$selected_kategori_id <- NULL
  session$userData$selected_periode_id <- NULL
  session$userData$selected_lokasi_id <- NULL
  
  # Reset registration modal state
  values$selected_location <- NULL
  values$show_registration_modal <- FALSE
  
  # Complete modal cleanup
  shinyjs::runjs("
      $('.modal').modal('hide');
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
      $('#admin_login_modal').hide();
    ")
  
  # Redirect to homepage
  updateTabItems(session, "student_menu", "locations")
  showNotification("Logout berhasil! Diarahkan ke halaman utama.", type = "message")
})

# Login error handling
output$login_error <- reactive({
  values$login_error
})
outputOptions(output, "login_error", suspendWhenHidden = FALSE)

output$login_error_message <- renderText({
  "Username atau password salah!"
})

# ================================
# 3. MASTER DATA - KATEGORI MODULE
# ================================

# Kategori table display
output$kategori_table <- DT::renderDataTable({
  display_data <- values$kategori_data[, c("id_kategori", "nama_kategori", "deskripsi_kategori", "isu_strategis")]
  
  DT::datatable(display_data,
                options = list(
                  pageLength = 10, 
                  dom = 'tip',
                  language = list(
                    emptyTable = "Tidak ada data kategori",
                    info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ kategori"
                  )
                ),
                colnames = c("ID", "Nama Kategori", "Deskripsi", "Isu Strategis"),
                selection = "single",
                rownames = FALSE)
})

# Handle kategori table row selection for editing
observeEvent(input$kategori_table_rows_selected, {
  if (length(input$kategori_table_rows_selected) > 0) {
    selected_row <- input$kategori_table_rows_selected
    kategori <- values$kategori_data[selected_row, ]
    
    # Populate form fields
    updateTextInput(session, "kategori_nama", value = kategori$nama_kategori)
    updateTextAreaInput(session, "kategori_deskripsi", value = kategori$deskripsi_kategori)
    updateTextAreaInput(session, "kategori_isu", value = kategori$isu_strategis)
    
    # Store the selected ID for editing
    session$userData$selected_kategori_id <- kategori$id_kategori
    showNotification("Data kategori dipilih untuk edit", type = "message")
  }
})

# Save kategori (Add/Edit)
observeEvent(input$save_kategori, {
  req(input$kategori_nama)
  
  tryCatch({
    if (is.null(session$userData$selected_kategori_id)) {
      # ADD NEW KATEGORI
      new_id <- max(values$kategori_data$id_kategori) + 1
      new_kategori <- data.frame(
        id_kategori = new_id,
        nama_kategori = input$kategori_nama,
        deskripsi_kategori = ifelse(is.null(input$kategori_deskripsi) || input$kategori_deskripsi == "", 
                                    "Tidak ada deskripsi", input$kategori_deskripsi),
        isu_strategis = ifelse(is.null(input$kategori_isu) || input$kategori_isu == "", 
                               "Tidak ada isu strategis", input$kategori_isu),
        timestamp = Sys.time(),
        stringsAsFactors = FALSE
      )
      values$kategori_data <- rbind(values$kategori_data, new_kategori)
      save_kategori_data(values$kategori_data)
      showNotification("Kategori baru berhasil ditambahkan!", type = "message")
    } else {
      # EDIT EXISTING KATEGORI
      row_idx <- which(values$kategori_data$id_kategori == session$userData$selected_kategori_id)
      if(length(row_idx) > 0) {
        values$kategori_data[row_idx, "nama_kategori"] <- input$kategori_nama
        values$kategori_data[row_idx, "deskripsi_kategori"] <- ifelse(is.null(input$kategori_deskripsi) || input$kategori_deskripsi == "", 
                                                                      "Tidak ada deskripsi", input$kategori_deskripsi)
        values$kategori_data[row_idx, "isu_strategis"] <- ifelse(is.null(input$kategori_isu) || input$kategori_isu == "", 
                                                                 "Tidak ada isu strategis", input$kategori_isu)
        save_kategori_data(values$kategori_data)
        showNotification("Kategori berhasil diperbarui!", type = "message")
      }
    }
    
    # Update lokasi kategori choices
    updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
    
    # Reset form
    session$userData$selected_kategori_id <- NULL
    updateTextInput(session, "kategori_nama", value = "")
    updateTextAreaInput(session, "kategori_deskripsi", value = "")
    updateTextAreaInput(session, "kategori_isu", value = "")
    
  }, error = function(e) {
    showNotification(paste("Error:", e$message), type = "error")
  })
})

# Delete kategori with validation
observeEvent(input$delete_kategori, {
  if (length(input$kategori_table_rows_selected) > 0) {
    selected_row <- input$kategori_table_rows_selected
    kategori_id <- values$kategori_data[selected_row, "id_kategori"]
    kategori_name <- values$kategori_data[selected_row, "nama_kategori"]
    
    # Check if kategori is used in lokasi
    usage_check <- check_category_usage(kategori_id, values$lokasi_data)
    
    if (!usage_check$can_delete) {
      showModal(modalDialog(
        title = "❌ Tidak Dapat Menghapus",
        div(class = "alert alert-danger", usage_check$reason),
        footer = modalButton("OK")
      ))
      return()
    }
    
    # Confirm deletion
    showModal(modalDialog(
      title = "⚠️ Konfirmasi Hapus",
      paste("Apakah Anda yakin ingin menghapus kategori '", kategori_name, "'?"),
      footer = tagList(
        actionButton("confirm_delete_kategori", "Hapus", class = "btn btn-danger"),
        modalButton("Batal")
      )
    ))
  } else {
    showNotification("Pilih kategori yang akan dihapus terlebih dahulu!", type = "warning")
  }
})

# Confirm kategori deletion
observeEvent(input$confirm_delete_kategori, {
  if (length(input$kategori_table_rows_selected) > 0) {
    selected_row <- input$kategori_table_rows_selected
    kategori_name <- values$kategori_data[selected_row, "nama_kategori"]
    values$kategori_data <- values$kategori_data[-selected_row, ]
    save_kategori_data(values$kategori_data)
    
    # Update choices in other components
    updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
    
    showNotification(paste("Kategori '", kategori_name, "' berhasil dihapus!"), type = "message")
    removeModal()
  }
})

# Reset kategori form
observeEvent(input$reset_kategori, {
  session$userData$selected_kategori_id <- NULL
  updateTextInput(session, "kategori_nama", value = "")
  updateTextAreaInput(session, "kategori_deskripsi", value = "")
  updateTextAreaInput(session, "kategori_isu", value = "")
  showNotification("Form kategori direset", type = "message")
})

# ================================
# 4. MASTER DATA - PERIODE MODULE
# ================================

# Periode table display
output$periode_table <- DT::renderDataTable({
  display_data <- values$periode_data[, c("id_periode", "nama_periode", "waktu_mulai", "waktu_selesai", "status")]
  display_data$waktu_mulai <- format(display_data$waktu_mulai, "%d-%m-%Y")
  display_data$waktu_selesai <- format(display_data$waktu_selesai, "%d-%m-%Y")
  
  DT::datatable(display_data,
                options = list(
                  pageLength = 10,
                  dom = 'tip',
                  language = list(
                    emptyTable = "Tidak ada data periode",
                    info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ periode"
                  )
                ),
                colnames = c("ID", "Nama Periode", "Mulai", "Selesai", "Status"),
                selection = "single",
                rownames = FALSE) %>%
    DT::formatStyle("status",
                    backgroundColor = DT::styleEqual(
                      c("Aktif", "Tidak Aktif"),
                      c("#d4edda", "#f8d7da")
                    ),
                    fontWeight = "bold"
    )
})

# Handle periode table row selection for editing
observeEvent(input$periode_table_rows_selected, {
  if (length(input$periode_table_rows_selected) > 0) {
    selected_row <- input$periode_table_rows_selected
    periode <- values$periode_data[selected_row, ]
    
    # Populate form fields
    updateTextInput(session, "periode_nama", value = periode$nama_periode)
    updateDateInput(session, "periode_mulai", value = periode$waktu_mulai)
    updateDateInput(session, "periode_selesai", value = periode$waktu_selesai)
    updateSelectInput(session, "periode_status", selected = periode$status)
    
    # Store the selected ID for editing
    session$userData$selected_periode_id <- periode$id_periode
    showNotification("Data periode dipilih untuk edit", type = "message")
  }
})

# Save periode (Add/Edit)
observeEvent(input$save_periode, {
  req(input$periode_nama, input$periode_mulai, input$periode_selesai)
  
  tryCatch({
    # Validate dates
    if (input$periode_mulai >= input$periode_selesai) {
      showNotification("Tanggal mulai harus lebih awal dari tanggal selesai!", type = "error")
      return()
    }
    
    # Check for overlapping active periods
    if (input$periode_status == "Aktif") {
      overlapping <- values$periode_data[
        values$periode_data$status == "Aktif" & 
          !(if(!is.null(session$userData$selected_periode_id)) {
            values$periode_data$id_periode == session$userData$selected_periode_id
          } else {
            FALSE
          }), ]
      
      if (nrow(overlapping) > 0) {
        showNotification("Tidak boleh ada lebih dari satu periode aktif pada satu waktu!", type = "error")
        return()
      }
    }
    
    if (is.null(session$userData$selected_periode_id)) {
      # ADD NEW PERIODE
      new_id <- max(values$periode_data$id_periode) + 1
      new_periode <- data.frame(
        id_periode = new_id,
        nama_periode = input$periode_nama,
        waktu_mulai = input$periode_mulai,
        waktu_selesai = input$periode_selesai,
        status = input$periode_status,
        timestamp = Sys.time(),
        stringsAsFactors = FALSE
      )
      values$periode_data <- rbind(values$periode_data, new_periode)
      save_periode_data(values$periode_data)
      showNotification("Periode baru berhasil ditambahkan!", type = "message")
    } else {
      # EDIT EXISTING PERIODE
      row_idx <- which(values$periode_data$id_periode == session$userData$selected_periode_id)
      if(length(row_idx) > 0) {
        values$periode_data[row_idx, "nama_periode"] <- input$periode_nama
        values$periode_data[row_idx, "waktu_mulai"] <- input$periode_mulai
        values$periode_data[row_idx, "waktu_selesai"] <- input$periode_selesai
        values$periode_data[row_idx, "status"] <- input$periode_status
        save_periode_data(values$periode_data)
        showNotification("Periode berhasil diperbarui!", type = "message")
      }
    }
    
    # Reset form
    session$userData$selected_periode_id <- NULL
    updateTextInput(session, "periode_nama", value = "")
    updateDateInput(session, "periode_mulai", value = Sys.Date())
    updateDateInput(session, "periode_selesai", value = Sys.Date() + 30)
    updateSelectInput(session, "periode_status", selected = "Tidak Aktif")
    
  }, error = function(e) {
    showNotification(paste("Error:", e$message), type = "error")
  })
})

# Delete periode
observeEvent(input$delete_periode, {
  if (length(input$periode_table_rows_selected) > 0) {
    selected_row <- input$periode_table_rows_selected
    periode_name <- values$periode_data[selected_row, "nama_periode"]
    
    # Confirm deletion
    showModal(modalDialog(
      title = "⚠️ Konfirmasi Hapus",
      paste("Apakah Anda yakin ingin menghapus periode '", periode_name, "'?"),
      footer = tagList(
        actionButton("confirm_delete_periode", "Hapus", class = "btn btn-danger"),
        modalButton("Batal")
      )
    ))
  } else {
    showNotification("Pilih periode yang akan dihapus terlebih dahulu!", type = "warning")
  }
})

# Confirm periode deletion
observeEvent(input$confirm_delete_periode, {
  if (length(input$periode_table_rows_selected) > 0) {
    selected_row <- input$periode_table_rows_selected
    periode_name <- values$periode_data[selected_row, "nama_periode"]
    values$periode_data <- values$periode_data[-selected_row, ]
    save_periode_data(values$periode_data)
    
    showNotification(paste("Periode '", periode_name, "' berhasil dihapus!"), type = "message")
    removeModal()
  }
})

# Reset periode form
observeEvent(input$reset_periode, {
  session$userData$selected_periode_id <- NULL
  updateTextInput(session, "periode_nama", value = "")
  updateDateInput(session, "periode_mulai", value = Sys.Date())
  updateDateInput(session, "periode_selesai", value = Sys.Date() + 30)
  updateSelectInput(session, "periode_status", selected = "Tidak Aktif")
  showNotification("Form periode direset", type = "message")
})

# ================================
# 5. MASTER DATA - LOKASI MODULE
# ================================

# Update kategori choices when kategori data changes
observe({
  updateSelectInput(session, "lokasi_kategori", choices = values$kategori_data$nama_kategori)
})

# Enhanced lokasi table with quota status
output$lokasi_table <- DT::renderDataTable({
  display_lokasi <- values$lokasi_data[, c("id_lokasi", "nama_lokasi", "kategori_lokasi", "kuota_mahasiswa")]
  
  # Add quota status information
  display_lokasi$quota_status <- sapply(display_lokasi$nama_lokasi, function(nama) {
    status <- get_current_quota_status(nama, values$pendaftaran_data, values$lokasi_data)
    paste0(status$used_quota, "/", status$total_quota, 
           " (Tersedia: ", status$available_quota, ")")
  })
  
  display_lokasi$quota_detail <- sapply(display_lokasi$nama_lokasi, function(nama) {
    status <- get_current_quota_status(nama, values$pendaftaran_data, values$lokasi_data)
    paste0("Pending: ", status$pending, ", Approved: ", status$approved, ", Rejected: ", status$rejected)
  })
  
  DT::datatable(display_lokasi,
                options = list(
                  pageLength = 10, 
                  dom = 'tip',
                  language = list(
                    emptyTable = "Tidak ada data lokasi",
                    info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ lokasi"
                  )
                ),
                colnames = c("ID", "Nama Lokasi", "Kategori", "Kuota Total", "Status Kuota", "Detail Pendaftar"),
                selection = "single",
                rownames = FALSE)
})

# Handle lokasi table row selection for editing
observeEvent(input$lokasi_table_rows_selected, {
  if (length(input$lokasi_table_rows_selected) > 0) {
    selected_row <- input$lokasi_table_rows_selected
    lokasi <- values$lokasi_data[selected_row, ]
    
    # Populate form fields
    updateTextInput(session, "lokasi_nama", value = lokasi$nama_lokasi)
    updateTextAreaInput(session, "lokasi_deskripsi", value = lokasi$deskripsi_lokasi)
    updateSelectInput(session, "lokasi_kategori", selected = lokasi$kategori_lokasi)
    updateTextAreaInput(session, "lokasi_isu", value = lokasi$isu_strategis)
    updateSelectInput(session, "lokasi_prodi", selected = lokasi$program_studi[[1]])
    updateNumericInput(session, "lokasi_kuota", value = lokasi$kuota_mahasiswa)
    
    # Store the selected ID for editing
    session$userData$selected_lokasi_id <- lokasi$id_lokasi
    showNotification("Data lokasi dipilih untuk edit", type = "message")
  }
})

# Save lokasi (Add/Edit)
observeEvent(input$save_lokasi, {
  req(input$lokasi_nama, input$lokasi_kategori)
  
  tryCatch({
    # Handle file upload for foto_lokasi
    foto_url <- "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=250&fit=crop"
    
    if (!is.null(input$lokasi_foto)) {
      # Create images directory if it doesn't exist
      if (!dir.exists("www/images")) dir.create("www/images", recursive = TRUE)
      
      # Generate unique filename
      file_ext <- tools::file_ext(input$lokasi_foto$name)
      new_filename <- paste0("lokasi_", Sys.time() %>% as.numeric(), ".", file_ext)
      foto_path <- file.path("www/images", new_filename)
      
      # Copy uploaded file
      file.copy(input$lokasi_foto$datapath, foto_path)
      foto_url <- paste0("images/", new_filename)
    }
    
    if (is.null(session$userData$selected_lokasi_id)) {
      # ADD NEW LOKASI
      new_id <- max(values$lokasi_data$id_lokasi) + 1
      new_lokasi <- data.frame(
        id_lokasi = new_id,
        nama_lokasi = input$lokasi_nama,
        deskripsi_lokasi = ifelse(is.null(input$lokasi_deskripsi) || input$lokasi_deskripsi == "", 
                                  "Tidak ada deskripsi", input$lokasi_deskripsi),
        kategori_lokasi = input$lokasi_kategori,
        isu_strategis = ifelse(is.null(input$lokasi_isu) || input$lokasi_isu == "", 
                               "Tidak ada isu strategis", input$lokasi_isu),
        kuota_mahasiswa = ifelse(is.null(input$lokasi_kuota) || input$lokasi_kuota == 0, 5, input$lokasi_kuota),
        foto_lokasi = foto_url,
        timestamp = Sys.time(),
        stringsAsFactors = FALSE
      )
      
      # Add program studi
      selected_prodi <- input$lokasi_prodi
      if (is.null(selected_prodi) || length(selected_prodi) == 0) {
        selected_prodi <- c("Informatika")
      }
      new_lokasi$program_studi <- list(selected_prodi)
      
      values$lokasi_data <- rbind(values$lokasi_data, new_lokasi)
      save_lokasi_data(values$lokasi_data)
      showNotification("Lokasi baru berhasil ditambahkan!", type = "message")
      
    } else {
      # EDIT EXISTING LOKASI
      row_idx <- which(values$lokasi_data$id_lokasi == session$userData$selected_lokasi_id)
      if(length(row_idx) > 0) {
        values$lokasi_data[row_idx, "nama_lokasi"] <- input$lokasi_nama
        values$lokasi_data[row_idx, "deskripsi_lokasi"] <- ifelse(is.null(input$lokasi_deskripsi) || input$lokasi_deskripsi == "", 
                                                                  "Tidak ada deskripsi", input$lokasi_deskripsi)
        values$lokasi_data[row_idx, "kategori_lokasi"] <- input$lokasi_kategori
        values$lokasi_data[row_idx, "isu_strategis"] <- ifelse(is.null(input$lokasi_isu) || input$lokasi_isu == "", 
                                                               "Tidak ada isu strategis", input$lokasi_isu)
        # Update foto only if new file uploaded
        if (!is.null(input$lokasi_foto)) {
          values$lokasi_data[row_idx, "foto_lokasi"] <- foto_url
        }
        values$lokasi_data[row_idx, "kuota_mahasiswa"] <- ifelse(is.null(input$lokasi_kuota) || input$lokasi_kuota == 0, 5, input$lokasi_kuota)
        
        # Update program studi
        selected_prodi <- input$lokasi_prodi
        if (is.null(selected_prodi) || length(selected_prodi) == 0) {
          selected_prodi <- values$lokasi_data[row_idx, "program_studi"][[1]]
        }
        values$lokasi_data[row_idx, "program_studi"] <- list(selected_prodi)
        
        save_lokasi_data(values$lokasi_data)
        showNotification("Lokasi berhasil diperbarui!", type = "message")
      }
    }
    
    # Reset form
    session$userData$selected_lokasi_id <- NULL
    updateTextInput(session, "lokasi_nama", value = "")
    updateTextAreaInput(session, "lokasi_deskripsi", value = "")
    updateSelectInput(session, "lokasi_kategori", selected = character(0))
    updateTextAreaInput(session, "lokasi_isu", value = "")
    updateSelectInput(session, "lokasi_prodi", selected = character(0))
    updateNumericInput(session, "lokasi_kuota", value = 5)
    
  }, error = function(e) {
    showNotification(paste("Error:", e$message), type = "error")
  })
})

# Delete lokasi
observeEvent(input$delete_lokasi, {
  if (length(input$lokasi_table_rows_selected) > 0) {
    selected_row <- input$lokasi_table_rows_selected
    lokasi_name <- values$lokasi_data[selected_row, "nama_lokasi"]
    
    # Confirm deletion
    showModal(modalDialog(
      title = "⚠️ Konfirmasi Hapus",
      paste("Apakah Anda yakin ingin menghapus lokasi '", lokasi_name, "'?"),
      footer = tagList(
        actionButton("confirm_delete_lokasi", "Hapus", class = "btn btn-danger"),
        modalButton("Batal")
      )
    ))
  } else {
    showNotification("Pilih lokasi yang akan dihapus terlebih dahulu!", type = "warning")
  }
})

# Confirm lokasi deletion
observeEvent(input$confirm_delete_lokasi, {
  if (length(input$lokasi_table_rows_selected) > 0) {
    selected_row <- input$lokasi_table_rows_selected
    lokasi_name <- values$lokasi_data[selected_row, "nama_lokasi"]
    values$lokasi_data <- values$lokasi_data[-selected_row, ]
    save_lokasi_data(values$lokasi_data)
    
    showNotification(paste("Lokasi '", lokasi_name, "' berhasil dihapus!"), type = "message")
    removeModal()
  }
})

# Reset lokasi form
observeEvent(input$reset_lokasi, {
  session$userData$selected_lokasi_id <- NULL
  updateTextInput(session, "lokasi_nama", value = "")
  updateTextAreaInput(session, "lokasi_deskripsi", value = "")
  updateSelectInput(session, "lokasi_kategori", selected = character(0))
  updateTextAreaInput(session, "lokasi_isu", value = "")
  updateSelectInput(session, "lokasi_prodi", selected = character(0))
  updateNumericInput(session, "lokasi_kuota", value = 5)
  showNotification("Form lokasi direset", type = "message")
})

# ================================
# 6. STUDENT INTERFACE MODULE
# ================================

# Quick stats for students
output$total_locations_student <- renderText({
  nrow(values$lokasi_data)
})

output$active_period_student <- renderText({
  if(is_registration_open(values$periode_data)) "AKTIF" else "TUTUP"
})

# Check if there are locations to display
output$has_locations <- reactive({
  nrow(values$lokasi_data) > 0
})
outputOptions(output, "has_locations", suspendWhenHidden = FALSE)

# Enhanced locations display with real-time quota
output$locations_grid <- renderUI({
  locations <- values$lokasi_data
  
  if (nrow(locations) == 0) {
    return(div(class = "alert alert-info text-center",
               style = "margin-top: 50px; padding: 40px;",
               icon("info-circle", style = "font-size: 3em; margin-bottom: 15px;"),
               h4("Belum ada lokasi tersedia"),
               p("Admin belum menambahkan lokasi. Silakan cek kembali nanti.")))
  }
  
  registration_open <- is_registration_open(values$periode_data)
  
  location_cards <- lapply(1:nrow(locations), function(i) {
    loc <- locations[i, ]
    quota_status <- get_current_quota_status(loc$nama_lokasi, values$pendaftaran_data, values$lokasi_data)
    
    # Determine quota status and styling
    quota_class <- if (quota_status$available_quota > 5) "quota-available" 
    else if (quota_status$available_quota > 0) "quota-limited" 
    else "quota-full"
    
    quota_text <- if (quota_status$available_quota > 0) 
      paste("Tersedia:", quota_status$available_quota, "dari", quota_status$total_quota) else 
        "KUOTA PENUH"
    
    quota_icon <- if (quota_status$available_quota > 5) "✅" 
    else if (quota_status$available_quota > 0) "⚠️" 
    else "❌"
    
    # Create enhanced card
    div(class = "location-card", style = "margin-bottom: 20px;",
        img(src = loc$foto_lokasi, class = "location-image", alt = loc$nama_lokasi),
        
        div(class = "location-content",
            div(class = "location-title", loc$nama_lokasi),
            span(class = "location-category", loc$kategori_lokasi),
            
            div(class = "location-description", loc$deskripsi_lokasi),
            
            div(class = "location-details",
                div(style = "margin-bottom: 10px;",
                    strong("🎯 Isu Strategis: "), loc$isu_strategis
                ),
                div(class = "location-prodi",
                    strong("📚 Program Studi: "), 
                    paste(loc$program_studi[[1]], collapse = ", ")
                ),
                div(class = "location-quota",
                    strong("👥 Kuota: "), paste(quota_status$total_quota, "mahasiswa"),
                    br(),
                    span(style = "font-size: 0.9em; color: #666;",
                         "Pending: ", quota_status$pending, " | ",
                         "Disetujui: ", quota_status$approved, " | ",
                         "Ditolak: ", quota_status$rejected)
                ),
                
                # Action section with quota status
                div(class = "quota-section", style = "margin-top: 15px;",
                    div(
                      span(class = quota_class, paste(quota_icon, quota_text))
                    ),
                    div(style = "margin-top: 10px;",
                        if (quota_status$available_quota > 0 && registration_open) {
                          actionButton(paste0("register_", i), "📝 Daftar Sekarang", 
                                       class = "register-btn",
                                       style = "width: 100%;",
                                       onclick = paste0("
                                             Shiny.setInputValue('selected_location_id', '", loc$id_lokasi, "', {priority: 'event'}); 
                                             Shiny.setInputValue('show_registration_modal', Math.random(), {priority: 'event'});
                                           "))
                        } else {
                          if (!registration_open) {
                            span("⏰ Periode pendaftaran tidak aktif", 
                                 class = "text-muted", 
                                 style = "font-style: italic; display: block; text-align: center; padding: 10px;")
                          } else {
                            span("❌ Kuota Penuh", 
                                 class = "text-danger", 
                                 style = "font-weight: bold; display: block; text-align: center; padding: 10px;")
                          }
                        }
                    )
                )
            )
        )
    )
  })
  
  return(do.call(tagList, location_cards))
})

# ================================
# 7. REGISTRATION FUNCTIONALITY
# ================================

# Handle location selection and show registration modal
observeEvent(input$selected_location_id, {
  req(input$selected_location_id)
  
  lokasi <- values$lokasi_data[values$lokasi_data$id_lokasi == input$selected_location_id, ]
  if (nrow(lokasi) > 0) {
    values$selected_location <- lokasi[1, ]
    values$show_registration_modal <- TRUE
    updateSelectInput(session, "reg_program_studi", choices = lokasi$program_studi[[1]])
  }
}, ignoreInit = TRUE)

# Show/hide registration modal
output$show_registration_modal <- reactive({
  values$show_registration_modal
})
outputOptions(output, "show_registration_modal", suspendWhenHidden = FALSE)

# Registration modal trigger
observeEvent(input$show_registration_modal, {
  req(input$show_registration_modal)
  values$show_registration_modal <- TRUE
}, ignoreInit = TRUE)

# Registration form outputs
output$selected_location_info <- renderText({
  if (!is.null(values$selected_location)) {
    paste(
      "📍 Lokasi:", values$selected_location$nama_lokasi, "\n",
      "🏷️ Kategori:", values$selected_location$kategori_lokasi, "\n", 
      "👥 Kuota:", values$selected_location$kuota_mahasiswa, "mahasiswa\n",
      "📚 Program Studi yang dapat mendaftar:", paste(values$selected_location$program_studi[[1]], collapse = ", ")
    )
  }
})

output$location_description <- renderText({
  if (!is.null(values$selected_location)) {
    values$selected_location$deskripsi_lokasi
  }
})

output$location_strategic_issues <- renderText({
  if (!is.null(values$selected_location)) {
    values$selected_location$isu_strategis
  }
})

# Reset registration form function
reset_registration_form <- function() {
  updateTextInput(session, "reg_nama", value = "")
  updateSelectInput(session, "reg_program_studi", selected = character(0))
  updateTextInput(session, "reg_kontak", value = "")
  updateTextInput(session, "reg_usulan_dosen", value = "")
  updateTextAreaInput(session, "reg_alasan", value = "")
  
  # Clear file inputs
  shinyjs::runjs("
        $('#reg_cv_mahasiswa').val('');
        $('#reg_form_rekomendasi').val('');
        $('#reg_form_komitmen').val('');
        $('#reg_transkrip_nilai').val('');
        $('.form-control-file').each(function() {
          $(this).val('');
        });
        $('input[type=file]').each(function() {
          var label = $(this).siblings('label');
          if (label.length) {
            label.text(label.data('original-text') || 'Choose file');
          }
        });
      ")
}

# Close registration modal
observeEvent(input$close_registration_modal, {
  values$selected_location <- NULL
  values$show_registration_modal <- FALSE
  reset_registration_form()
  
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
      ")
})

# Registration submission
observeEvent(input$submit_registration, {
  req(input$reg_nama, input$reg_program_studi, input$reg_kontak, input$reg_usulan_dosen, input$reg_alasan)
  
  tryCatch({
    # Validate registration eligibility
    eligibility <- check_registration_eligibility(input$reg_nama, values$selected_location$nama_lokasi, 
                                                  values$pendaftaran_data, values$periode_data)
    
    if (!eligibility$eligible) {
      showModal(modalDialog(
        title = "❌ Tidak Dapat Mendaftar",
        div(class = "alert alert-danger", eligibility$reason),
        footer = modalButton("OK")
      ))
      return()
    }
    
    # Check quota availability
    quota_status <- get_current_quota_status(values$selected_location$nama_lokasi, 
                                             values$pendaftaran_data, values$lokasi_data)
    
    if (quota_status$available_quota <= 0) {
      showModal(modalDialog(
        title = "❌ Kuota Penuh",
        div(class = "alert alert-warning", "Maaf, kuota untuk lokasi ini sudah penuh."),
        footer = modalButton("OK")
      ))
      return()
    }
    
    # Validate documents
    doc_validation <- validate_documents(list(
      reg_cv_mahasiswa = input$reg_cv_mahasiswa,
      reg_form_rekomendasi = input$reg_form_rekomendasi,
      reg_form_komitmen = input$reg_form_komitmen,
      reg_transkrip_nilai = input$reg_transkrip_nilai
    ))
    
    if (!doc_validation$valid) {
      missing_doc_names <- c(
        reg_cv_mahasiswa = "CV Mahasiswa",
        reg_form_rekomendasi = "Form Rekomendasi Program Studi", 
        reg_form_komitmen = "Form Komitmen Mahasiswa",
        reg_transkrip_nilai = "Transkrip Nilai"
      )
      
      showModal(modalDialog(
        title = "📎 Dokumen Tidak Lengkap",
        div(class = "alert alert-warning", 
            "Harap upload semua dokumen yang diperlukan:",
            tags$ul(
              lapply(doc_validation$missing, function(doc) {
                tags$li(missing_doc_names[doc])
              })
            )
        ),
        footer = modalButton("OK")
      ))
      return()
    }
    
    # Handle file uploads
    doc_paths <- list()
    upload_dir <- "www/documents"
    if (!dir.exists(upload_dir)) dir.create(upload_dir, recursive = TRUE)
    
    required_docs <- c("reg_cv_mahasiswa", "reg_form_rekomendasi", "reg_form_komitmen", "reg_transkrip_nilai")
    
    for (doc in required_docs) {
      if (!is.null(input[[doc]])) {
        file_ext <- tools::file_ext(input[[doc]]$name)
        new_filename <- paste0(gsub("reg_", "", doc), "_", input$reg_nama, "_", Sys.time() %>% as.numeric(), ".", file_ext)
        doc_path <- file.path(upload_dir, new_filename)
        file.copy(input[[doc]]$datapath, doc_path)
        doc_paths[[doc]] <- paste0("documents/", new_filename)
      }
    }
    
    # Generate proper registration ID
    new_id <- get_next_registration_id(values$pendaftaran_data)
    
    # Create new registration entry
    new_registration <- data.frame(
      id_pendaftaran = new_id,
      timestamp = Sys.time(),
      nama_mahasiswa = input$reg_nama,
      program_studi = input$reg_program_studi,
      kontak = input$reg_kontak,
      pilihan_lokasi = values$selected_location$nama_lokasi,
      alasan_pemilihan = input$reg_alasan,
      usulan_dosen_pembimbing = input$reg_usulan_dosen,
      cv_mahasiswa_path = ifelse(is.null(doc_paths[["reg_cv_mahasiswa"]]), "", doc_paths[["reg_cv_mahasiswa"]]),
      form_rekomendasi_prodi_path = ifelse(is.null(doc_paths[["reg_form_rekomendasi"]]), "", doc_paths[["reg_form_rekomendasi"]]),
      form_komitmen_mahasiswa_path = ifelse(is.null(doc_paths[["reg_form_komitmen"]]), "", doc_paths[["reg_form_komitmen"]]),
      transkrip_nilai_path = ifelse(is.null(doc_paths[["reg_transkrip_nilai"]]), "", doc_paths[["reg_transkrip_nilai"]]),
      status_pendaftaran = "Diajukan",
      alasan_penolakan = NA,
      stringsAsFactors = FALSE
    )
    
    # Add to data and save
    values$pendaftaran_data <- rbind(values$pendaftaran_data, new_registration)
    values$last_registration_id <- new_id
    
    # Save to RDS file
    tryCatch({
      if (!dir.exists("data")) dir.create("data", recursive = TRUE)
      save_pendaftaran_data(values$pendaftaran_data)
    }, error = function(e) {
      showNotification("Warning: Data tidak tersimpan ke file", type = "warning")
    })
    
    # FIXED: Store location name before clearing for success modal
    selected_location_name <- values$selected_location$nama_lokasi
    
    # FIXED: Close registration modal and reset form BEFORE showing success modal
    values$show_registration_modal <- FALSE
    reset_registration_form()
    
    # FIXED: Clean up registration modal immediately (specific, not affecting other modals)
    shinyjs::runjs("
      // Only clean up registration modal artifacts, not all modals
      $('.modal-backdrop').remove();
      $('body').removeClass('modal-open');
      $('body').css('padding-right', '');
      $('body').css('overflow', '');
    ")
    
    # FIXED: Small delay before showing success modal to ensure cleanup
    shinyjs::delay(300, {
      showModal(modalDialog(
        title = div(style = "text-align: center;",
                    h3("🎉 Pendaftaran Berhasil!", style = "color: #28a745;")
        ),
        div(style = "text-align: center; padding: 20px;",
            div(style = "background: #d4edda; padding: 20px; border-radius: 10px; margin-bottom: 20px;",
                h4("📋 Detail Pendaftaran", style = "color: #155724; margin-bottom: 15px;"),
                p(strong("ID Pendaftaran: "), span(new_id, style = "color: #007bff; font-weight: bold;")),
                p(strong("Nama: "), input$reg_nama),
                p(strong("Lokasi: "), selected_location_name),
                p(strong("Program Studi: "), input$reg_program_studi),
                p(strong("Status: "), span("⏳ Diajukan", style = "color: #856404; font-weight: bold;"))
            ),
            div(style = "background: #fff3cd; padding: 15px; border-radius: 8px;",
                h5("📌 Langkah Selanjutnya:", style = "color: #856404;"),
                p("✅ Pendaftaran Anda akan diproses oleh admin", style = "margin: 5px 0;"),
                p("📧 Anda akan dihubungi melalui kontak yang diberikan", style = "margin: 5px 0;"),
                p("📋 Simpan ID Pendaftaran untuk referensi", style = "margin: 5px 0;")
            )
        ),
        footer = div(style = "text-align: center;",
                     actionButton("close_success_modal", "✅ Mengerti", class = "btn btn-success")
        ),
        easyClose = FALSE
      ))
    })
    
    # FIXED: Clear selected location after storing name for success modal
    values$selected_location <- NULL
    
  }, error = function(e) {
    showModal(modalDialog(
      title = "❌ Error",
      div(class = "alert alert-danger", paste("Terjadi kesalahan:", e$message)),
      footer = modalButton("OK")
    ))
  })
})

# Handle success modal closure
observeEvent(input$close_success_modal, {
  removeModal()
  values$selected_location <- NULL
  values$show_registration_modal <- FALSE
  reset_registration_form()
  
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
})

# ================================
# 8. STUDENT STATUS CHECK MODULE
# ================================

# Update filter choices for students
observe({
  if(nrow(values$pendaftaran_data) > 0) {
    current_lokasis <- unique(values$pendaftaran_data$pilihan_lokasi)
    current_lokasis <- current_lokasis[!is.na(current_lokasis) & current_lokasis != ""]
  } else {
    current_lokasis <- character(0)
  }
  
  updateSelectInput(session, "search_lokasi", 
                    choices = c("Semua Lokasi" = "", current_lokasis))
})

# Search registration reactive
search_results <- reactive({
  if(input$search_registration == 0) {
    return(data.frame())
  }
  
  isolate({
    has_criteria <- (!is.null(input$search_nama) && input$search_nama != "") ||
      (!is.null(input$search_tanggal) && !is.na(input$search_tanggal)) ||
      (!is.null(input$search_lokasi) && input$search_lokasi != "") ||
      (!is.null(input$search_status) && input$search_status != "")
    
    if(!has_criteria) {
      return(data.frame())
    }
    
    results <- search_registrations(
      nama = input$search_nama,
      tanggal = input$search_tanggal,
      lokasi = input$search_lokasi,
      status = input$search_status,
      pendaftaran_data = values$pendaftaran_data
    )
    
    return(results)
  })
})

# Display search results for students
output$registration_results <- DT::renderDataTable({
  results <- search_results()
  
  if(input$search_registration == 0) {
    return(data.frame(
      "🔍" = "Gunakan form pencarian di sebelah kiri untuk mencari status pendaftaran Anda",
      "💡" = "Masukkan minimal nama atau kriteria lain, lalu klik 'Cari Status'",
      check.names = FALSE
    ))
  }
  
  if (nrow(results) == 0) {
    return(data.frame(
      "📝" = "Tidak ada data ditemukan dengan kriteria pencarian yang diberikan",
      "💡" = "Coba ubah kriteria pencarian atau periksa ejaan nama",
      "🔄" = "Pastikan nama sesuai dengan yang didaftarkan",
      check.names = FALSE
    ))
  }
  
  display_data <- results[, c("id_pendaftaran", "nama_mahasiswa", "program_studi", 
                              "pilihan_lokasi", "status_pendaftaran", "timestamp")]
  display_data$timestamp <- format(display_data$timestamp, "%d-%m-%Y %H:%M")
  
  display_data$status_detail <- sapply(1:nrow(display_data), function(i) {
    status <- display_data$status_pendaftaran[i]
    reg_id <- display_data$id_pendaftaran[i]
    full_reg <- results[results$id_pendaftaran == reg_id, ]
    
    status_text <- switch(status,
                          "Diajukan" = "⏳ Diajukan - Sedang diproses admin",
                          "Disetujui" = "✅ Disetujui - Pendaftaran diterima", 
                          "Ditolak" = {
                            if(!is.na(full_reg$alasan_penolakan) && full_reg$alasan_penolakan != "") {
                              paste("❌ Ditolak -", substr(full_reg$alasan_penolakan, 1, 100))
                            } else {
                              "❌ Ditolak - Hubungi admin untuk detail"
                            }
                          },
                          paste("❓", status)
    )
    
    return(status_text)
  })
  
  display_data$kontak_info <- sapply(1:nrow(display_data), function(i) {
    reg_id <- display_data$id_pendaftaran[i]
    full_reg <- results[results$id_pendaftaran == reg_id, ]
    
    if(!is.na(full_reg$kontak) && full_reg$kontak != "") {
      return(full_reg$kontak)
    } else {
      return("-")
    }
  })
  
  final_data <- display_data[, c("id_pendaftaran", "nama_mahasiswa", "program_studi",
                                 "pilihan_lokasi", "status_detail", "kontak_info", "timestamp")]
  
  DT::datatable(final_data, 
                options = list(
                  pageLength = 10, 
                  searching = FALSE,
                  dom = 'rtip',
                  scrollX = TRUE,
                  language = list(
                    emptyTable = "Tidak ada data pendaftaran yang ditemukan",
                    info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ pendaftaran",
                    infoEmpty = "Tidak ada data untuk ditampilkan",
                    paginate = list(
                      previous = "Sebelumnya",
                      `next` = "Selanjutnya"
                    )
                  )
                ),
                colnames = c("🆔 ID", "👤 Nama", "🎓 Prodi", "📍 Lokasi", "📊 Status & Detail", "📱 Kontak", "📅 Tanggal"),
                rownames = FALSE, 
                escape = FALSE) %>%
    DT::formatStyle("status_detail",
                    backgroundColor = DT::styleEqual(
                      c("⏳ Diajukan - Sedang diproses admin", "✅ Disetujui - Pendaftaran diterima"),
                      c("#fff3cd", "#d4edda")
                    ),
                    fontWeight = "bold"
    ) %>%
    DT::formatStyle("id_pendaftaran",
                    backgroundColor = "#e3f2fd",
                    fontWeight = "bold"
    )
})

# ================================
# 9. ADMIN REGISTRATION MANAGEMENT
# ================================

# Update filter choices for admin
observe({
  current_lokasis <- unique(values$lokasi_data$nama_lokasi)
  updateSelectInput(session, "admin_filter_lokasi", 
                    choices = c("Semua Lokasi" = "", current_lokasis))
})

# Filter function for admin registrations
admin_filtered_registrations <- reactive({
  data <- values$pendaftaran_data
  
  if (!is.null(input$admin_filter_lokasi) && input$admin_filter_lokasi != "") {
    data <- data[data$pilihan_lokasi == input$admin_filter_lokasi, ]
  }
  
  if (!is.null(input$admin_filter_status) && input$admin_filter_status != "") {
    data <- data[data$status_pendaftaran == input$admin_filter_status, ]
  }
  
  if (!is.null(input$admin_filter_prodi) && input$admin_filter_prodi != "") {
    data <- data[data$program_studi == input$admin_filter_prodi, ]
  }
  
  return(data)
})

# Display registration table for admin
output$admin_registrations_table <- DT::renderDataTable({
  registrations <- admin_filtered_registrations()
  
  if (nrow(registrations) == 0) {
    return(data.frame(
      Message = "Tidak ada data pendaftar yang sesuai dengan filter"
    ))
  }
  
  display_data <- registrations
  display_data$timestamp <- format(display_data$timestamp, "%d-%m-%Y %H:%M")
  
  table_data <- display_data[, c("id_pendaftaran", "timestamp", "nama_mahasiswa", 
                                 "program_studi", "pilihan_lokasi", "kontak", "status_pendaftaran")]
  
  table_data$aksi <- sapply(1:nrow(table_data), function(i) {
    reg_id <- display_data$id_pendaftaran[i]
    status <- display_data$status_pendaftaran[i]
    
    buttons <- paste0('<button class="btn btn-sm btn-info" onclick="Shiny.setInputValue(\'view_registration_detail\', ', reg_id, ')">📄 Detail</button>')
    
    if (status == "Diajukan") {
      buttons <- paste0(buttons, 
                        ' <button class="btn btn-sm btn-success" onclick="Shiny.setInputValue(\'approve_registration_id\', ', reg_id, ')">✅ Setujui</button>',
                        ' <button class="btn btn-sm btn-danger" onclick="Shiny.setInputValue(\'reject_registration_id\', ', reg_id, ')">❌ Tolak</button>')
    }
    
    return(buttons)
  })
  
  DT::datatable(table_data,
                options = list(
                  pageLength = 10, 
                  searching = TRUE,
                  scrollX = TRUE,
                  columnDefs = list(list(orderable = FALSE, targets = ncol(table_data) - 1)),
                  language = list(
                    emptyTable = "Tidak ada data pendaftar",
                    info = "Menampilkan _START_ sampai _END_ dari _TOTAL_ pendaftar",
                    search = "Cari:",
                    lengthMenu = "Tampilkan _MENU_ data per halaman"
                  )
                ),
                colnames = c("ID", "📅 Tanggal", "👤 Nama", "🎓 Prodi", "📍 Lokasi", "📱 Kontak", "📊 Status", "🔧 Aksi"),
                selection = "none",
                escape = FALSE,
                rownames = FALSE) %>%
    DT::formatStyle("status_pendaftaran",
                    backgroundColor = DT::styleEqual(
                      c("Diajukan", "Disetujui", "Ditolak"),
                      c("#fff3cd", "#d4edda", "#f8d7da")
                    ),
                    fontWeight = "bold"
    )
})

# Admin refresh action
observeEvent(input$admin_refresh, {
  showNotification("Data berhasil direfresh!", type = "message")
})

# View registration detail
observeEvent(input$view_registration_detail, {
  req(input$view_registration_detail)
  
  tryCatch({
    shinyjs::runjs("
          $('.modal').modal('hide');
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
        ")
    
    reg_id <- input$view_registration_detail
    registration <- values$pendaftaran_data[values$pendaftaran_data$id_pendaftaran == reg_id, ]
    
    if (nrow(registration) > 0) {
      reg <- registration[1, ]
      
      safe_field <- function(field_name, default = "Tidak ada data") {
        if (field_name %in% names(reg) && !is.na(reg[[field_name]]) && reg[[field_name]] != "") {
          return(as.character(reg[[field_name]]))
        } else {
          return(default)
        }
      }
      
      Sys.sleep(0.1)
      
      showModal(modalDialog(
        title = paste("📋 Detail Pendaftaran ID:", reg_id),
        size = "l",
        easyClose = TRUE,
        
        div(style = "max-height: 70vh; overflow-y: auto;",
            wellPanel(
              h4("👤 Informasi Pribadi", style = "color: #495057; margin-bottom: 15px;"),
              fluidRow(
                column(6,
                       p(strong("Nama: "), safe_field("nama_mahasiswa")),
                       p(strong("Program Studi: "), safe_field("program_studi")),
                       p(strong("Kontak: "), safe_field("kontak"))
                ),
                column(6,
                       p(strong("Tanggal Daftar: "), 
                         if("timestamp" %in% names(reg)) {
                           format(reg$timestamp, "%d-%m-%Y %H:%M") 
                         } else { 
                           "Tidak ada data" 
                         }),
                       p(strong("Usulan Dosen: "), safe_field("usulan_dosen_pembimbing")),
                       p(strong("Status: "), 
                         span(safe_field("status_pendaftaran"), 
                              style = paste0("padding: 4px 8px; border-radius: 4px; color: white; background-color: ", 
                                             switch(safe_field("status_pendaftaran", ""),
                                                    "Disetujui" = "#28a745",
                                                    "Ditolak" = "#dc3545", 
                                                    "#ffc107"))))
                )
              )
            ),
            
            wellPanel(
              h4("📍 Informasi Lokasi", style = "color: #1976d2; margin-bottom: 15px;"),
              p(strong("Pilihan Lokasi: "), safe_field("pilihan_lokasi"))
            ),
            
            wellPanel(
              h4("💭 Alasan Pemilihan Lokasi", style = "color: #856404; margin-bottom: 15px;"),
              div(style = "background: #f8f9fa; padding: 15px; border-radius: 8px; max-height: 200px; overflow-y: auto;",
                  p(safe_field("alasan_pemilihan", "Tidak ada essay"), style = "margin: 0; line-height: 1.5;")
              )
            ),
            
            if (safe_field("status_pendaftaran") == "Ditolak" && safe_field("alasan_penolakan") != "Tidak ada data") {
              wellPanel(style = "background-color: #f8d7da; border-color: #f5c6cb;",
                        h4("❌ Alasan Penolakan", style = "color: #721c24; margin-bottom: 15px;"),
                        p(safe_field("alasan_penolakan"), style = "color: #721c24; font-weight: bold; margin: 0;")
              )
            }
        ),
        
        footer = tagList(
          if (safe_field("status_pendaftaran") == "Diajukan") {
            tagList(
              actionButton("approve_from_detail", "✅ Setujui", 
                           class = "btn btn-success",
                           onclick = paste0("Shiny.setInputValue('approve_registration_id', ", reg_id, ");")),
              actionButton("reject_from_detail", "❌ Tolak", 
                           class = "btn btn-danger",
                           onclick = paste0("Shiny.setInputValue('reject_registration_id', ", reg_id, ");")),
              actionButton("close_detail_modal", "Tutup", class = "btn btn-secondary")
            )
          } else {
            actionButton("close_detail_modal", "Tutup", class = "btn btn-secondary")
          }
        )
      ))
    }
  }, error = function(e) {
    showNotification(paste("Error:", e$message), type = "error")
  })
})

# Handle detail modal closure
observeEvent(input$close_detail_modal, {
  removeModal()
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
})

# Approve registration
observeEvent(input$approve_registration_id, {
  req(input$approve_registration_id)
  
  tryCatch({
    shinyjs::runjs("
          $('.modal').modal('hide');
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open');
          $('body').css('padding-right', '');
          $('body').css('overflow', '');
        ")
    
    reg_id <- input$approve_registration_id
    row_idx <- which(values$pendaftaran_data$id_pendaftaran == reg_id)
    
    if(length(row_idx) > 0) {
      registration <- values$pendaftaran_data[row_idx, ]
      
      values$pendaftaran_data[row_idx, "status_pendaftaran"] <- "Disetujui"
      if("alasan_penolakan" %in% names(values$pendaftaran_data)) {
        values$pendaftaran_data[row_idx, "alasan_penolakan"] <- NA
      }
      
      tryCatch({
        save_pendaftaran_data(values$pendaftaran_data)
      }, error = function(e) {
        showNotification("Warning: Data tidak tersimpan ke file", type = "warning")
      })
      
      Sys.sleep(0.1)
      
      showModal(modalDialog(
        title = "✅ Pendaftaran Disetujui",
        div(style = "text-align: center; padding: 20px;",
            h4(paste("Pendaftaran", registration$nama_mahasiswa, "telah disetujui!"), style = "color: #28a745;"),
            p("Mahasiswa akan dihubungi untuk langkah selanjutnya.")
        ),
        footer = actionButton("close_approve_modal", "OK", class = "btn btn-success"),
        easyClose = TRUE
      ))
    }
  }, error = function(e) {
    showNotification(paste("Error saat menyetujui:", e$message), type = "error")
  })
})

# Handle approve modal closure
observeEvent(input$close_approve_modal, {
  removeModal()
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
})

# Reject registration
observeEvent(input$reject_registration_id, {
  req(input$reject_registration_id)
  
  shinyjs::runjs("
        $('.modal').modal('hide');
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
  
  reg_id <- input$reject_registration_id
  
  Sys.sleep(0.1)
  
  showModal(modalDialog(
    title = "❌ Tolak Pendaftaran",
    easyClose = TRUE,
    div(
      h4(paste("Tolak pendaftaran ID:", reg_id)),
      p("Silakan berikan alasan penolakan yang jelas:"),
      textAreaInput("rejection_reason", "Alasan Penolakan:", 
                    placeholder = "Masukkan alasan penolakan yang jelas dan konstruktif...", 
                    rows = 4, width = "100%"),
      div(class = "alert alert-info", style = "margin-top: 10px;",
          "💡 Tips: Berikan alasan yang spesifik dan konstruktif agar mahasiswa dapat memperbaiki untuk pendaftaran selanjutnya."
      )
    ),
    footer = tagList(
      actionButton("confirm_reject", "❌ Tolak", class = "btn btn-danger"),
      actionButton("cancel_reject", "Batal", class = "btn btn-secondary")
    )
  ))
})

# Handle reject modal cancellation
observeEvent(input$cancel_reject, {
  removeModal()
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
})

# Confirm rejection
observeEvent(input$confirm_reject, {
  req(input$reject_registration_id, input$rejection_reason)
  
  if (input$rejection_reason == "") {
    showNotification("Alasan penolakan harus diisi!", type = "error")
    return()
  }
  
  tryCatch({
    reg_id <- input$reject_registration_id
    row_idx <- which(values$pendaftaran_data$id_pendaftaran == reg_id)
    
    if(length(row_idx) > 0) {
      registration <- values$pendaftaran_data[row_idx, ]
      
      values$pendaftaran_data[row_idx, "status_pendaftaran"] <- "Ditolak"
      values$pendaftaran_data[row_idx, "alasan_penolakan"] <- input$rejection_reason
      
      tryCatch({
        save_pendaftaran_data(values$pendaftaran_data)
      }, error = function(e) {
        showNotification("Warning: Data tidak tersimpan ke file", type = "warning")
      })
      
      removeModal()
      
      Sys.sleep(0.1)
      
      showModal(modalDialog(
        title = "❌ Pendaftaran Ditolak",
        div(style = "text-align: center; padding: 20px;",
            h4(paste("Pendaftaran", registration$nama_mahasiswa, "telah ditolak."), style = "color: #dc3545;"),
            p("Mahasiswa akan dihubungi dengan alasan penolakan.")
        ),
        footer = actionButton("close_reject_modal", "OK", class = "btn btn-secondary"),
        easyClose = TRUE
      ))
    }
  }, error = function(e) {
    showNotification(paste("Error saat menolak:", e$message), type = "error")
  })
})

# Handle reject success modal closure
observeEvent(input$close_reject_modal, {
  removeModal()
  shinyjs::runjs("
        $('.modal-backdrop').remove();
        $('body').removeClass('modal-open');
        $('body').css('padding-right', '');
        $('body').css('overflow', '');
      ")
})

# ================================
# 10. SESSION CLEANUP
# ================================

session$onSessionEnded(function() {
  session$userData$selected_kategori_id <- NULL
  session$userData$selected_periode_id <- NULL
  session$userData$selected_lokasi_id <- NULL
})

}